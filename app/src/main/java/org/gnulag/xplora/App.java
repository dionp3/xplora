/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.gnulag.xplora;

import java.io.InputStream;
import java.util.*;
import org.gnulag.xplora.models.RedBlackTreeMap;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONTokener;

public class App {
  public static void main(String[] args) {
    RedBlackTreeMap<String, String> rbTree = new RedBlackTreeMap<>();
    List<String> gimmickValues = Arrays.asList("acak", "kertas", "gunting", "batu");

    loadJsonData(rbTree, "/data.json");

    String searchParam = "gunting";
    List<String> combined = new ArrayList<>();

    if (gimmickValues.contains(searchParam)) {
      String gimmickResult = specialGimmick(searchParam);
      if (!gimmickResult.isEmpty()) {
        combined.add(gimmickResult);
      }
    }

    combined.addAll(rbTree.searchKeysByContainingKey(searchParam));
    combined.addAll(rbTree.searchKeysByContainingValue(searchParam));

    printResults(rbTree, combined);
  }

  private static void loadJsonData(RedBlackTreeMap<String, String> rbTree, String resourcePath) {
    try (InputStream jsonStream = App.class.getResourceAsStream(resourcePath)) {
      if (jsonStream != null) {
        JSONArray jsonArray = new JSONArray(new JSONTokener(jsonStream));
        for (int i = 0; i < jsonArray.length(); i++) {
          JSONObject jsonObject = jsonArray.getJSONObject(i);
          String key = jsonObject.keys().next();
          String value = jsonObject.getString(key);
          rbTree.insert(key, value);
        }
      } else {
        System.err.println("Failed to load data.json. The resource is not found.");
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  private static void printResults(RedBlackTreeMap<String, String> rbTree, List<String> keys) {
    for (String key : keys) {
      System.out.println(key);
      String value = rbTree.getValueByKey(key);
      if (value != null) {
        System.out.println(value);
      }
      System.out.println();
    }
  }

  private static String specialGimmick(String gimmick) {
    Random random = new Random();
    String result = "";
    switch (gimmick) {
      case "acak":
        for (int i = 0; i < 10; i++) {
          int randomNumber = random.nextInt(100); // Adjust the range as needed
          result += randomNumber;
          if (i < 9) {
            result += ", "; // Separate numbers with a comma and space
          }
        }
        return result;

      case "kertas":
      case "gunting":
      case "batu":
        List<String> options = Arrays.asList("kertas", "gunting", "batu");
        String botChoice = options.get(random.nextInt(options.size()));
        if (botChoice.equals(gimmick)) {
          result += "Bot's choice: " + botChoice + ", Match result: Draw";
        } else if ((gimmick.equals("kertas") && botChoice.equals("batu"))
            || (gimmick.equals("batu") && botChoice.equals("gunting"))
            || (gimmick.equals("gunting") && botChoice.equals("kertas"))) {
          result += "Bot's choice: " + botChoice + ", Match result: Player wins";
        } else {
          result += "Bot's choice: " + botChoice + ", Match result: Bot wins";
        }
        return result;

      default:
        return "";
    }
  }
}
